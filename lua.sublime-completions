{
	"scope": "source.lua.starbound - keyword.control.lua - constant.language.lua, source.lua.starbound string",

	"completions":
	[
		"in", "else", "return", "false", "true", "break", "or", "and",
		"_VERSION", "_ENV", "self", "storage", "math.huge", "math.pi",

		{ "trigger": "setmetatable", "contents": "setmetatable(${1})" },
		{ "trigger": "print", "contents": "print(${1})" },
		{ "trigger": "rawset", "contents": "rawset(${1})" },
		{ "trigger": "pairs", "contents": "pairs(${1})" },
		{ "trigger": "tonumber", "contents": "tonumber(${1})" },
		{ "trigger": "getmetatable", "contents": "getmetatable(${1})" },
		{ "trigger": "select", "contents": "select(${1})" },
		{ "trigger": "type", "contents": "type(${1})" },
		{ "trigger": "pcall", "contents": "pcall(${1})" },
		{ "trigger": "jsize", "contents": "jsize(${1})" },
		{ "trigger": "jobject", "contents": "jobject(${1})" },
		{ "trigger": "rawequal", "contents": "rawequal(${1})" },
		{ "trigger": "jremove", "contents": "jremove(${1})" },
		{ "trigger": "next", "contents": "next(${1})" },
		{ "trigger": "jresize", "contents": "jresize(${1})" },
		{ "trigger": "tostring", "contents": "tostring(${1})" },
		{ "trigger": "jarray", "contents": "jarray(${1})" },
		{ "trigger": "rawlen", "contents": "rawlen(${1})" },
		{ "trigger": "rawget", "contents": "rawget(${1})" },
		{ "trigger": "xpcall", "contents": "xpcall(${1})" },
		{ "trigger": "error", "contents": "error(${1})" },
		{ "trigger": "assert", "contents": "assert(${1})" },
		{ "trigger": "ipairs", "contents": "ipairs(${1})" },
		{ "trigger": "unpack", "contents": "unpack(${1})" },

		{ "trigger": "bit32.extract", "contents": "bit32.extract(${1})" },
		{ "trigger": "bit32.btest", "contents": "bit32.btest(${1})" },
		{ "trigger": "bit32.bor", "contents": "bit32.bor(${1})" },
		{ "trigger": "bit32.bnot", "contents": "bit32.bnot(${1})" },
		{ "trigger": "bit32.rshift", "contents": "bit32.rshift(${1})" },
		{ "trigger": "bit32.bxor", "contents": "bit32.bxor(${1})" },
		{ "trigger": "bit32.lshift", "contents": "bit32.lshift(${1})" },
		{ "trigger": "bit32.lrotate", "contents": "bit32.lrotate(${1})" },
		{ "trigger": "bit32.rrotate", "contents": "bit32.rrotate(${1})" },
		{ "trigger": "bit32.replace", "contents": "bit32.replace(${1})" },
		{ "trigger": "bit32.band", "contents": "bit32.band(${1})" },
		{ "trigger": "bit32.arshift", "contents": "bit32.arshift(${1})" },

		{ "trigger": "string.format", "contents": "string.format(${1})" },
		{ "trigger": "string.dump", "contents": "string.dump(${1})" },
		{ "trigger": "string.byte", "contents": "string.byte(${1})" },
		{ "trigger": "string.rep", "contents": "string.rep(${1})" },
		{ "trigger": "string.find", "contents": "string.find(${1})" },
		{ "trigger": "string.char", "contents": "string.char(${1})" },
		{ "trigger": "string.gmatch", "contents": "string.gmatch(${1})" },
		{ "trigger": "string.len", "contents": "string.len(${1})" },
		{ "trigger": "string.sub", "contents": "string.sub(${1})" },
		{ "trigger": "string.upper", "contents": "string.upper(${1})" },
		{ "trigger": "string.reverse", "contents": "string.reverse(${1})" },
		{ "trigger": "string.lower", "contents": "string.lower(${1})" },
		{ "trigger": "string.gsub", "contents": "string.gsub(${1})" },
		{ "trigger": "string.match", "contents": "string.match(${1})" },

		{ "trigger": "math.atan2", "contents": "math.atan2(${1})" },
		{ "trigger": "math.pow", "contents": "math.pow(${1})" },
		{ "trigger": "math.log10", "contents": "math.log10(${1})" },
		{ "trigger": "math.atan", "contents": "math.atan(${1})" },
		{ "trigger": "math.tan", "contents": "math.tan(${1})" },
		{ "trigger": "math.floor", "contents": "math.floor(${1})" },
		{ "trigger": "math.ceil", "contents": "math.ceil(${1})" },
		{ "trigger": "math.asin", "contents": "math.asin(${1})" },
		{ "trigger": "math.sqrt", "contents": "math.sqrt(${1})" },
		{ "trigger": "math.random", "contents": "math.random(${1})" },
		{ "trigger": "math.exp", "contents": "math.exp(${1})" },
		{ "trigger": "math.frexp", "contents": "math.frexp(${1})" },
		{ "trigger": "math.deg", "contents": "math.deg(${1})" },
		{ "trigger": "math.sin", "contents": "math.sin(${1})" },
		{ "trigger": "math.sinh", "contents": "math.sinh(${1})" },
		{ "trigger": "math.randomseed", "contents": "math.randomseed(${1})" },
		{ "trigger": "math.cos", "contents": "math.cos(${1})" },
		{ "trigger": "math.rad", "contents": "math.rad(${1})" },
		{ "trigger": "math.modf", "contents": "math.modf(${1})" },
		{ "trigger": "math.ldexp", "contents": "math.ldexp(${1})" },
		{ "trigger": "math.cosh", "contents": "math.cosh(${1})" },
		{ "trigger": "math.max", "contents": "math.max(${1})" },
		{ "trigger": "math.abs", "contents": "math.abs(${1})" },
		{ "trigger": "math.min", "contents": "math.min(${1})" },
		{ "trigger": "math.acos", "contents": "math.acos(${1})" },
		{ "trigger": "math.log", "contents": "math.log(${1})" },
		{ "trigger": "math.fmod", "contents": "math.fmod(${1})" },
		{ "trigger": "math.tanh", "contents": "math.tanh(${1})" },

		{ "trigger": "os.time", "contents": "os.time(${1})" },
		{ "trigger": "os.clock", "contents": "os.clock(${1})" },
		{ "trigger": "os.difftime", "contents": "os.difftime(${1})" },

		{ "trigger": "table.sort", "contents": "table.sort(${1})" },
		{ "trigger": "table.remove", "contents": "table.remove(${1})" },
		{ "trigger": "table.pack", "contents": "table.pack(${1})" },
		{ "trigger": "table.unpack", "contents": "table.unpack(${1})" },
		{ "trigger": "table.maxn", "contents": "table.maxn(${1})" },
		{ "trigger": "table.concat", "contents": "table.concat(${1})" },
		{ "trigger": "table.insert", "contents": "table.insert(${1})" },

		{ "trigger": "coroutine.running", "contents": "coroutine.running(${1})" },
		{ "trigger": "coroutine.yield", "contents": "coroutine.yield(${1})" },
		{ "trigger": "coroutine.status", "contents": "coroutine.status(${1})" },
		{ "trigger": "coroutine.resume", "contents": "coroutine.resume(${1})" },

		{ "trigger": "entity.configParameter", "contents": "entity.configParameter(${1})" },
		{ "trigger": "entity.randomizeParameter", "contents": "entity.randomizeParameter(${1})" },
		{ "trigger": "entity.randomizeParameterRange", "contents": "entity.randomizeParameterRange(${1})" },
		{ "trigger": "entity.staticRandomizeParameter", "contents": "entity.staticRandomizeParameter(${1})" },
		{ "trigger": "entity.closestValidTarget", "contents": "entity.closestValidTarget(${1})" },
		{ "trigger": "entity.damageTeam", "contents": "entity.damageTeam(${1})" },
		{ "trigger": "entity.distanceToEntity", "contents": "entity.distanceToEntity(${1})" },
		{ "trigger": "entity.entityInSight", "contents": "entity.entityInSight(${1})" },
		{ "trigger": "entity.id", "contents": "entity.id(${1})" },
		{ "trigger": "entity.isValidTarget", "contents": "entity.isValidTarget(${1})" },
		{ "trigger": "entity.anchorPoint", "contents": "entity.anchorPoint(${1})" },
		{ "trigger": "entity.animationState", "contents": "entity.animationState(${1})" },
		{ "trigger": "entity.animationStateProperty", "contents": "entity.animationStateProperty(${1})" },
		{ "trigger": "entity.appliedOffset", "contents": "entity.appliedOffset(${1})" },
		{ "trigger": "entity.burstParticleEmitter", "contents": "entity.burstParticleEmitter(${1})" },
		{ "trigger": "entity.currentRotationAngle", "contents": "entity.currentRotationAngle(${1})" },
		{ "trigger": "entity.currentScale", "contents": "entity.currentScale(${1})" },
		{ "trigger": "entity.hasSound", "contents": "entity.hasSound(${1})" },
		{ "trigger": "entity.playSound", "contents": "entity.playSound(${1})" },
		{ "trigger": "entity.rotateGroup", "contents": "entity.rotateGroup(${1})" },
		{ "trigger": "entity.scaleGroup", "contents": "entity.scaleGroup(${1})" },
		{ "trigger": "entity.setAnimationRate", "contents": "entity.setAnimationRate(${1})" },
		{ "trigger": "entity.setAnimationState", "contents": "entity.setAnimationState(${1})" },
		{ "trigger": "entity.setEffectActive", "contents": "entity.setEffectActive(${1})" },
		{ "trigger": "entity.setFlipped", "contents": "entity.setFlipped(${1})" },
		{ "trigger": "entity.setGlobalTag", "contents": "entity.setGlobalTag(${1})" },
		{ "trigger": "entity.setLightActive", "contents": "entity.setLightActive(${1})" },
		{ "trigger": "entity.setLightColor", "contents": "entity.setLightColor(${1})" },
		{ "trigger": "entity.setLightPointAngle", "contents": "entity.setLightPointAngle(${1})" },
		{ "trigger": "entity.setLightPosition", "contents": "entity.setLightPosition(${1})" },
		{ "trigger": "entity.setParticleEmitterActive", "contents": "entity.setParticleEmitterActive(${1})" },
		{ "trigger": "entity.setParticleEmitterEmissionRate", "contents": "entity.setParticleEmitterEmissionRate(${1})" },
		{ "trigger": "entity.setParticleEmitterOffsetRegion", "contents": "entity.setParticleEmitterOffsetRegion(${1})" },
		{ "trigger": "entity.setPartTag", "contents": "entity.setPartTag(${1})" },
		{ "trigger": "entity.setSoundPosition", "contents": "entity.setSoundPosition(${1})" },
		{ "trigger": "entity.toAbsolutePosition", "contents": "entity.toAbsolutePosition(${1})" },
		{ "trigger": "entity.direction", "contents": "entity.direction(${1})" },
		{ "trigger": "entity.uniqueParameters", "contents": "entity.uniqueParameters(${1})" },
		{ "trigger": "entity.say", "contents": "entity.say(${1})" },
		{ "trigger": "entity.setInteractive", "contents": "entity.setInteractive(${1})" },
		{ "trigger": "entity.boundBox", "contents": "entity.boundBox(${1})" },
		{ "trigger": "entity.position", "contents": "entity.position(${1})" },
		{ "trigger": "entity.getInboundNodeLevel", "contents": "entity.getInboundNodeLevel(${1})" },
		{ "trigger": "entity.smash", "contents": "entity.smash(${1})" },
		{ "trigger": "entity.setDeathParticleBurst", "contents": "entity.setDeathParticleBurst(${1})" },
		{ "trigger": "entity.setAimPosition", "contents": "entity.setAimPosition(${1})" },
		{ "trigger": "entity.setItemSlot", "contents": "entity.setItemSlot(${1})" },
		{ "trigger": "entity.endPrimaryFire", "contents": "entity.endPrimaryFire(${1})" },
		{ "trigger": "entity.endAltFire", "contents": "entity.endAltFire(${1})" },
		{ "trigger": "entity.beginPrimaryFire", "contents": "entity.beginPrimaryFire(${1})" },
		{ "trigger": "entity.beginAltFire", "contents": "entity.beginAltFire(${1})" },
		{ "trigger": "entity.setForceRegion", "contents": "entity.setForceRegion(${1})" },
		{ "trigger": "entity.setDamageOnTouch", "contents": "entity.setDamageOnTouch(${1})" },
		{ "trigger": "entity.randomizeSkillParameter", "contents": "entity.randomizeSkillParameter(${1})" },
		{ "trigger": "entity.setActiveSkillName", "contents": "entity.setActiveSkillName(${1})" },
		{ "trigger": "entity.staticRandomizeSkillParameter", "contents": "entity.staticRandomizeSkillParameter(${1})" },
		{ "trigger": "entity.heal", "contents": "entity.heal(${1})" },
		{ "trigger": "entity.setDropPool", "contents": "entity.setDropPool(${1})" },
		{ "trigger": "entity.level", "contents": "entity.level(${1})" },
		{ "trigger": "entity.setSoundPool", "contents": "entity.setSoundPool(${1})" },
		{ "trigger": "entity.setAggressive", "contents": "entity.setAggressive(${1})" },
		{ "trigger": "entity.type", "contents": "entity.type(${1})" },
		{ "trigger": "entity.skillConfigParameter", "contents": "entity.skillConfigParameter(${1})" },
		{ "trigger": "entity.flyTo", "contents": "entity.flyTo(${1})" },
		{ "trigger": "entity.familyIndex", "contents": "entity.familyIndex(${1})" },
		{ "trigger": "entity.seed", "contents": "entity.seed(${1})" },
		{ "trigger": "entity.randomizeSkillParameterRange", "contents": "entity.randomizeSkillParameterRange(${1})" },
		{ "trigger": "entity.setDeathSound", "contents": "entity.setDeathSound(${1})" },
		{ "trigger": "entity.getLightColor", "contents": "entity.getLightColor(${1})" },
		{ "trigger": "entity.setTurnInQuests", "contents": "entity.setTurnInQuests(${1})" },
		{ "trigger": "entity.isTouching", "contents": "entity.isTouching(${1})" },
		{ "trigger": "entity.getInboundNodePosition", "contents": "entity.getInboundNodePosition(${1})" },
		{ "trigger": "entity.setColliding", "contents": "entity.setColliding(${1})" },
		{ "trigger": "entity.getOutboundNodePosition", "contents": "entity.getOutboundNodePosition(${1})" },
		{ "trigger": "entity.setProcessingDirectives", "contents": "entity.setProcessingDirectives(${1})" },
		{ "trigger": "entity.setOfferedQuests", "contents": "entity.setOfferedQuests(${1})" },
		{ "trigger": "entity.getOutboundNodeIds", "contents": "entity.getOutboundNodeIds(${1})" },
		{ "trigger": "entity.outboundNodeCount", "contents": "entity.outboundNodeCount(${1})" },
		{ "trigger": "entity.inboundNodeCount", "contents": "entity.inboundNodeCount(${1})" },
		{ "trigger": "entity.setSoundEffectEnabled", "contents": "entity.setSoundEffectEnabled(${1})" },
		{ "trigger": "entity.getInboundNodeIds", "contents": "entity.getInboundNodeIds(${1})" },
		{ "trigger": "entity.isOutboundNodeConnected", "contents": "entity.isOutboundNodeConnected(${1})" },
		{ "trigger": "entity.isInboundNodeConnected", "contents": "entity.isInboundNodeConnected(${1})" },
		{ "trigger": "entity.setAllOutboundNodes", "contents": "entity.setAllOutboundNodes(${1})" },
		{ "trigger": "entity.setOutboundNodeLevel", "contents": "entity.setOutboundNodeLevel(${1})" },
		{ "trigger": "entity.isLounging", "contents": "entity.isLounging(${1})" },
		{ "trigger": "entity.energy", "contents": "entity.energy(${1})" },
		{ "trigger": "entity.resetLounging", "contents": "entity.resetLounging(${1})" },
		{ "trigger": "entity.setShifting", "contents": "entity.setShifting(${1})" },
		{ "trigger": "entity.disableWornArmor", "contents": "entity.disableWornArmor(${1})" },
		{ "trigger": "entity.setLounging", "contents": "entity.setLounging(${1})" },
		{ "trigger": "entity.aimPosition", "contents": "entity.aimPosition(${1})" },
		{ "trigger": "entity.getItemSlot", "contents": "entity.getItemSlot(${1})" },
		{ "trigger": "entity.species", "contents": "entity.species(${1})" },
		{ "trigger": "entity.emote", "contents": "entity.emote(${1})" },
		{ "trigger": "entity.maxEnergy", "contents": "entity.maxEnergy(${1})" },
		{ "trigger": "entity.health", "contents": "entity.health(${1})" },
		{ "trigger": "entity.maxHealth", "contents": "entity.maxHealth(${1})" },

		{ "trigger": "fireableItem.cooldownTime", "contents": "fireableItem.cooldownTime(${1})" },
		{ "trigger": "fireableItem.coolingDown", "contents": "fireableItem.coolingDown(${1})" },
		{ "trigger": "fireableItem.endCooldown", "contents": "fireableItem.endCooldown(${1})" },
		{ "trigger": "fireableItem.fire", "contents": "fireableItem.fire(${1})" },
		{ "trigger": "fireableItem.fireableParam", "contents": "fireableItem.fireableParam(${1})" },
		{ "trigger": "fireableItem.fireMode", "contents": "fireableItem.fireMode(${1})" },
		{ "trigger": "fireableItem.firing", "contents": "fireableItem.firing(${1})" },
		{ "trigger": "fireableItem.ownerConsumeEnergy", "contents": "fireableItem.ownerConsumeEnergy(${1})" },
		{ "trigger": "fireableItem.ownerEnergy", "contents": "fireableItem.ownerEnergy(${1})" },
		{ "trigger": "fireableItem.ownerEnergyLocked", "contents": "fireableItem.ownerEnergyLocked(${1})" },
		{ "trigger": "fireableItem.ownerFullEnergy", "contents": "fireableItem.ownerFullEnergy(${1})" },
		{ "trigger": "fireableItem.ready", "contents": "fireableItem.ready(${1})" },
		{ "trigger": "fireableItem.setCooldown", "contents": "fireableItem.setCooldown(${1})" },
		{ "trigger": "fireableItem.triggerCooldown", "contents": "fireableItem.triggerCooldown(${1})" },
		{ "trigger": "fireableItem.windingUp", "contents": "fireableItem.windingUp(${1})" },

		{ "trigger": "item.category", "contents": "item.category(${1})" },
		{ "trigger": "item.consume", "contents": "item.consume(${1})" },
		{ "trigger": "item.count", "contents": "item.count(${1})" },
		{ "trigger": "item.description", "contents": "item.description(${1})" },
		{ "trigger": "item.descriptor", "contents": "item.descriptor(${1})" },
		{ "trigger": "item.dropDrawables", "contents": "item.dropDrawables(${1})" },
		{ "trigger": "item.empty", "contents": "item.empty(${1})" },
		{ "trigger": "item.friendlyName", "contents": "item.friendlyName(${1})" },
		{ "trigger": "item.fuelAmount", "contents": "item.fuelAmount(${1})" },
		{ "trigger": "item.hasQuestTriggerKey", "contents": "item.hasQuestTriggerKey(${1})" },
		{ "trigger": "item.iconDrawables", "contents": "item.iconDrawables(${1})" },
		{ "trigger": "item.instanceValue", "contents": "item.instanceValue(${1})" },
		{ "trigger": "item.is", "contents": "item.is(${1})" },
		{ "trigger": "item.largeImage", "contents": "item.largeImage(${1})" },
		{ "trigger": "item.learnBlueprintsOnPickup", "contents": "item.learnBlueprintsOnPickup(${1})" },
		{ "trigger": "item.matches", "contents": "item.matches(${1})" },
		{ "trigger": "item.matchingDescriptors", "contents": "item.matchingDescriptors(${1})" },
		{ "trigger": "item.maxStack", "contents": "item.maxStack(${1})" },
		{ "trigger": "item.name", "contents": "item.name(${1})" },
		{ "trigger": "item.ownerAimPosition", "contents": "item.ownerAimPosition(${1})" },
		{ "trigger": "item.ownerPosition", "contents": "item.ownerPosition(${1})" },
		{ "trigger": "item.pickupQuestTemplates", "contents": "item.pickupQuestTemplates(${1})" },
		{ "trigger": "item.pickupSound", "contents": "item.pickupSound(${1})" },
		{ "trigger": "item.price", "contents": "item.price(${1})" },
		{ "trigger": "item.rarity", "contents": "item.rarity(${1})" },
		{ "trigger": "item.rarityString", "contents": "item.rarityString(${1})" },
		{ "trigger": "item.setCount", "contents": "item.setCount(${1})" },
		{ "trigger": "item.timeToLive", "contents": "item.timeToLive(${1})" },
		{ "trigger": "item.tooltipKind", "contents": "item.tooltipKind(${1})" },
		{ "trigger": "item.twoHanded", "contents": "item.twoHanded(${1})" },

		{ "trigger": "root.evalFunction", "contents": "root.evalFunction(${1})" },
		{ "trigger": "root.evalFunction2", "contents": "root.evalFunction2(${1})" },
		{ "trigger": "root.imageSize", "contents": "root.imageSize(${1})" },
		{ "trigger": "root.imageSpaces", "contents": "root.imageSpaces(${1})" },
		{ "trigger": "root.itemConfig", "contents": "root.itemConfig(${1})" },
		{ "trigger": "root.itemType", "contents": "root.itemType(${1})" },
		{ "trigger": "root.liquidStatusEffects", "contents": "root.liquidStatusEffects(${1})" },
		{ "trigger": "root.logInfo", "contents": "root.logInfo(${1})" },
		{ "trigger": "root.makeUuid", "contents": "root.makeUuid(${1})" },
		{ "trigger": "root.nonEmptyRegion", "contents": "root.nonEmptyRegion(${1})" },
		{ "trigger": "root.npcConfig", "contents": "root.npcConfig(${1})" },
		{ "trigger": "root.projectileConfig", "contents": "root.projectileConfig(${1})" },
		{ "trigger": "root.projectileGravityMultiplier", "contents": "root.projectileGravityMultiplier(${1})" },
		{ "trigger": "root.recipesForItem", "contents": "root.recipesForItem(${1})" },

		{ "trigger": "status.addEphemeralEffect", "contents": "status.addEphemeralEffect(${1})" },
		{ "trigger": "status.addEphemeralEffects", "contents": "status.addEphemeralEffects(${1})" },
		{ "trigger": "status.addPersistentEffect", "contents": "status.addPersistentEffect(${1})" },
		{ "trigger": "status.addPersistentEffects", "contents": "status.addPersistentEffects(${1})" },
		{ "trigger": "status.clearAllPersistentEffects", "contents": "status.clearAllPersistentEffects(${1})" },
		{ "trigger": "status.clearEphemeralEffects", "contents": "status.clearEphemeralEffects(${1})" },
		{ "trigger": "status.clearPersistentEffects", "contents": "status.clearPersistentEffects(${1})" },
		{ "trigger": "status.consumeResource", "contents": "status.consumeResource(${1})" },
		{ "trigger": "status.isResource", "contents": "status.isResource(${1})" },
		{ "trigger": "status.modifyResource", "contents": "status.modifyResource(${1})" },
		{ "trigger": "status.modifyResourcePercentage", "contents": "status.modifyResourcePercentage(${1})" },
		{ "trigger": "status.overConsumeResource", "contents": "status.overConsumeResource(${1})" },
		{ "trigger": "status.removeEphemeralEffect", "contents": "status.removeEphemeralEffect(${1})" },
		{ "trigger": "status.resetAllResources", "contents": "status.resetAllResources(${1})" },
		{ "trigger": "status.resetResource", "contents": "status.resetResource(${1})" },
		{ "trigger": "status.resource", "contents": "status.resource(${1})" },
		{ "trigger": "status.resourceLocked", "contents": "status.resourceLocked(${1})" },
		{ "trigger": "status.resourceMax", "contents": "status.resourceMax(${1})" },
		{ "trigger": "status.resourceNames", "contents": "status.resourceNames(${1})" },
		{ "trigger": "status.resourcePercentage", "contents": "status.resourcePercentage(${1})" },
		{ "trigger": "status.resourcePositive", "contents": "status.resourcePositive(${1})" },
		{ "trigger": "status.setPersistentEffects", "contents": "status.setPersistentEffects(${1})" },
		{ "trigger": "status.setResource", "contents": "status.setResource(${1})" },
		{ "trigger": "status.setResourceLocked", "contents": "status.setResourceLocked(${1})" },
		{ "trigger": "status.setResourcePercentage", "contents": "status.setResourcePercentage(${1})" },
		{ "trigger": "status.setStatusProperty", "contents": "status.setStatusProperty(${1})" },
		{ "trigger": "status.stat", "contents": "status.stat(${1})" },
		{ "trigger": "status.statPositive", "contents": "status.statPositive(${1})" },
		{ "trigger": "status.statusProperty", "contents": "status.statusProperty(${1})" },
		{ "trigger": "status.applySelfDamageRequest", "contents": "status.applySelfDamageRequest(${1})" },
		{ "trigger": "status.setPrimaryDirectives", "contents": "status.setPrimaryDirectives(${1})" },

		{ "trigger": "universe.adminBroadcast", "contents": "universe.adminBroadcast(${1})" },
		{ "trigger": "universe.adminWhisper", "contents": "universe.adminWhisper(${1})" },
		{ "trigger": "universe.clientIds", "contents": "universe.clientIds(${1})" },
		{ "trigger": "universe.clientNick", "contents": "universe.clientNick(${1})" },
		{ "trigger": "universe.findNick", "contents": "universe.findNick(${1})" },
		{ "trigger": "universe.isAdmin", "contents": "universe.isAdmin(${1})" },
		{ "trigger": "universe.isConnectedClient", "contents": "universe.isConnectedClient(${1})" },
		{ "trigger": "universe.isPvp", "contents": "universe.isPvp(${1})" },
		{ "trigger": "universe.numberOfClients", "contents": "universe.numberOfClients(${1})" },
		{ "trigger": "universe.setPvp", "contents": "universe.setPvp(${1})" },

		{ "trigger": "CommandProcessor.adminCheck", "contents": "CommandProcessor.adminCheck(${1})" },

		{ "trigger": "world.breakObject", "contents": "world.breakObject(${1})" },
		{ "trigger": "world.dungeonId", "contents": "world.dungeonId(${1})" },
		{ "trigger": "world.isVisibleToPlayer", "contents": "world.isVisibleToPlayer(${1})" },
		{ "trigger": "world.loadRegion", "contents": "world.loadRegion(${1})" },
		{ "trigger": "world.setTileProtection", "contents": "world.setTileProtection(${1})" },
		{ "trigger": "world.collisionBlocksAlongLine", "contents": "world.collisionBlocksAlongLine(${1})" },
		{ "trigger": "world.day", "contents": "world.day(${1})" },
		{ "trigger": "world.destroyLiquid", "contents": "world.destroyLiquid(${1})" },
		{ "trigger": "world.distance", "contents": "world.distance(${1})" },
		{ "trigger": "world.getProperty", "contents": "world.getProperty(${1})" },
		{ "trigger": "world.gravity", "contents": "world.gravity(${1})" },
		{ "trigger": "world.itemType", "contents": "world.itemType(${1})" },
		{ "trigger": "world.lineTileCollision", "contents": "world.lineTileCollision(${1})" },
		{ "trigger": "world.liquidAt", "contents": "world.liquidAt(${1})" },
		{ "trigger": "world.magnitude", "contents": "world.magnitude(${1})" },
		{ "trigger": "world.placeObject", "contents": "world.placeObject(${1})" },
		{ "trigger": "world.pointTileCollision", "contents": "world.pointTileCollision(${1})" },
		{ "trigger": "world.polyCollision", "contents": "world.polyCollision(${1})" },
		{ "trigger": "world.rectCollision", "contents": "world.rectCollision(${1})" },
		{ "trigger": "world.rectTileCollision", "contents": "world.rectTileCollision(${1})" },
		{ "trigger": "world.resolvePolyCollision", "contents": "world.resolvePolyCollision(${1})" },
		{ "trigger": "world.setProperty", "contents": "world.setProperty(${1})" },
		{ "trigger": "world.spawnItem", "contents": "world.spawnItem(${1})" },
		{ "trigger": "world.spawnLiquid", "contents": "world.spawnLiquid(${1})" },
		{ "trigger": "world.spawnMonster", "contents": "world.spawnMonster(${1})" },
		{ "trigger": "world.spawnNpc", "contents": "world.spawnNpc(${1})" },
		{ "trigger": "world.spawnProjectile", "contents": "world.spawnProjectile(${1})" },
		{ "trigger": "world.tileIsOccupied", "contents": "world.tileIsOccupied(${1})" },
		{ "trigger": "world.time", "contents": "world.time(${1})" },
		{ "trigger": "world.timeOfDay", "contents": "world.timeOfDay(${1})" },
		{ "trigger": "world.debugLine", "contents": "world.debugLine(${1})" },
		{ "trigger": "world.debugPoint", "contents": "world.debugPoint(${1})" },
		{ "trigger": "world.debugText", "contents": "world.debugText(${1})" },
		{ "trigger": "world.logInfo", "contents": "world.logInfo(${1})" },
		{ "trigger": "world.callScriptedEntity", "contents": "world.callScriptedEntity(${1:ent}, \"${2:func}\", ${3:...})" },
		{ "trigger": "world.containerAddItems", "contents": "world.containerAddItems(${1})" },
		{ "trigger": "world.containerAvailable", "contents": "world.containerAvailable(${1})" },
		{ "trigger": "world.containerClose", "contents": "world.containerClose(${1})" },
		{ "trigger": "world.containerConsume", "contents": "world.containerConsume(${1})" },
		{ "trigger": "world.containerConsumeAt", "contents": "world.containerConsumeAt(${1})" },
		{ "trigger": "world.containerItemApply", "contents": "world.containerItemApply(${1})" },
		{ "trigger": "world.containerItemAt", "contents": "world.containerItemAt(${1})" },
		{ "trigger": "world.containerItems", "contents": "world.containerItems(${1})" },
		{ "trigger": "world.containerItemsCanFit", "contents": "world.containerItemsCanFit(${1})" },
		{ "trigger": "world.containerItemsFitWhere", "contents": "world.containerItemsFitWhere(${1})" },
		{ "trigger": "world.containerOpen", "contents": "world.containerOpen(${1})" },
		{ "trigger": "world.containerPutItemsAt", "contents": "world.containerPutItemsAt(${1})" },
		{ "trigger": "world.containerSize", "contents": "world.containerSize(${1})" },
		{ "trigger": "world.containerStackItems", "contents": "world.containerStackItems(${1})" },
		{ "trigger": "world.containerSwapItems", "contents": "world.containerSwapItems(${1})" },
		{ "trigger": "world.containerSwapItemsNoCombine", "contents": "world.containerSwapItemsNoCombine(${1})" },
		{ "trigger": "world.containerTakeAll", "contents": "world.containerTakeAll(${1})" },
		{ "trigger": "world.containerTakeAt", "contents": "world.containerTakeAt(${1})" },
		{ "trigger": "world.containerTakeNumItemsAt", "contents": "world.containerTakeNumItemsAt(${1})" },
		{ "trigger": "world.entityExists", "contents": "world.entityExists(${1})" },
		{ "trigger": "world.entityHandItem", "contents": "world.entityHandItem(${1})" },
		{ "trigger": "world.entityHandItemDescriptor", "contents": "world.entityHandItemDescriptor(${1})" },
		{ "trigger": "world.entityHealth", "contents": "world.entityHealth(${1})" },
		{ "trigger": "world.entityLineQuery", "contents": "world.entityLineQuery(${1})" },
		{ "trigger": "world.entityName", "contents": "world.entityName(${1})" },
		{ "trigger": "world.entityPosition", "contents": "world.entityPosition(${1})" },
		{ "trigger": "world.entityQuery", "contents": "world.entityQuery(${1})" },
		{ "trigger": "world.entitySpecies", "contents": "world.entitySpecies(${1})" },
		{ "trigger": "world.entityType", "contents": "world.entityType(${1})" },
		{ "trigger": "world.entityUuid", "contents": "world.entityUuid(${1})" },
		{ "trigger": "world.entityVelocity", "contents": "world.entityVelocity(${1})" },
		{ "trigger": "world.farmableStage", "contents": "world.farmableStage(${1})" },
		{ "trigger": "world.isMonster", "contents": "world.isMonster(${1})" },
		{ "trigger": "world.isNpc", "contents": "world.isNpc(${1})" },
		{ "trigger": "world.itemDropQuery", "contents": "world.itemDropQuery(${1})" },
		{ "trigger": "world.loungeableOccupied", "contents": "world.loungeableOccupied(${1})" },
		{ "trigger": "world.loungeableQuery", "contents": "world.loungeableQuery(${1})" },
		{ "trigger": "world.monsterQuery", "contents": "world.monsterQuery(${1})" },
		{ "trigger": "world.monsterType", "contents": "world.monsterType(${1})" },
		{ "trigger": "world.npcLineQuery", "contents": "world.npcLineQuery(${1})" },
		{ "trigger": "world.npcQuery", "contents": "world.npcQuery(${1})" },
		{ "trigger": "world.objectConfigParameter", "contents": "world.objectConfigParameter(${1})" },
		{ "trigger": "world.objectLineQuery", "contents": "world.objectLineQuery(${1})" },
		{ "trigger": "world.objectQuery", "contents": "world.objectQuery(${1})" },
		{ "trigger": "world.playerQuery", "contents": "world.playerQuery(${1})" },
		{ "trigger": "world.takeItemDrop", "contents": "world.takeItemDrop(${1})" },
		{ "trigger": "world.breathable", "contents": "world.breathable(${1})" },
		{ "trigger": "world.damageTiles", "contents": "world.damageTiles(${1})" },
		{ "trigger": "world.lightLevel", "contents": "world.lightLevel(${1})" },
		{ "trigger": "world.material", "contents": "world.material(${1})" },
		{ "trigger": "world.mod", "contents": "world.mod(${1})" },
		{ "trigger": "world.placeMaterial", "contents": "world.placeMaterial(${1})" },
		{ "trigger": "world.placeMod", "contents": "world.placeMod(${1})" },
		{ "trigger": "world.underground", "contents": "world.underground(${1})" },
		{ "trigger": "world.windLevel", "contents": "world.windLevel(${1})" },

		{ "trigger": "effect.setParentDirectives", "contents": "effect.setParentDirectives(${1})" },
		{ "trigger": "effect.configParameter", "contents": "effect.configParameter(${1})" },
		{ "trigger": "effect.duration", "contents": "effect.duration(${1})" },
		{ "trigger": "effect.addStatModifierGroup", "contents": "effect.addStatModifierGroup(${1})" },
		{ "trigger": "effect.expire", "contents": "effect.expire(${1})" },
		{ "trigger": "effect.modifyDuration", "contents": "effect.modifyDuration(${1})" },
		{ "trigger": "effect.removeStatModifierGroup", "contents": "effect.removeStatModifierGroup(${1})" },
		{ "trigger": "effect.setStatModifierGroup", "contents": "effect.setStatModifierGroup(${1})" },

		{ "trigger": "tech.appliedOffset", "contents": "tech.appliedOffset(${1})" },
		{ "trigger": "tech.setLightPosition", "contents": "tech.setLightPosition(${1})" },
		{ "trigger": "tech.setFlipped", "contents": "tech.setFlipped(${1})" },
		{ "trigger": "tech.animationState", "contents": "tech.animationState(${1})" },
		{ "trigger": "tech.setSoundPosition", "contents": "tech.setSoundPosition(${1})" },
		{ "trigger": "tech.setAnimationState", "contents": "tech.setAnimationState(${1})" },
		{ "trigger": "tech.playSound", "contents": "tech.playSound(${1})" },
		{ "trigger": "tech.setLightActive", "contents": "tech.setLightActive(${1})" },
		{ "trigger": "tech.setParentDirectives", "contents": "tech.setParentDirectives(${1})" },
		{ "trigger": "tech.setPartTag", "contents": "tech.setPartTag(${1})" },
		{ "trigger": "tech.scaleGroup", "contents": "tech.scaleGroup(${1})" },
		{ "trigger": "tech.aimPosition", "contents": "tech.aimPosition(${1})" },
		{ "trigger": "tech.rotateGroup", "contents": "tech.rotateGroup(${1})" },
		{ "trigger": "tech.setParticleEmitterOffsetRegion", "contents": "tech.setParticleEmitterOffsetRegion(${1})" },
		{ "trigger": "tech.currentScale", "contents": "tech.currentScale(${1})" },
		{ "trigger": "tech.anchorPoint", "contents": "tech.anchorPoint(${1})" },
		{ "trigger": "tech.currentRotationAngle", "contents": "tech.currentRotationAngle(${1})" },
		{ "trigger": "tech.setEffectActive", "contents": "tech.setEffectActive(${1})" },
		{ "trigger": "tech.setParentOffset", "contents": "tech.setParentOffset(${1})" },
		{ "trigger": "tech.animationStateProperty", "contents": "tech.animationStateProperty(${1})" },
		{ "trigger": "tech.parameter", "contents": "tech.parameter(${1})" },
		{ "trigger": "tech.setToolUsageSuppressed", "contents": "tech.setToolUsageSuppressed(${1})" },
		{ "trigger": "tech.setSoundPool", "contents": "tech.setSoundPool(${1})" },
		{ "trigger": "tech.setParticleEmitterEmissionRate", "contents": "tech.setParticleEmitterEmissionRate(${1})" },
		{ "trigger": "tech.consumeTechEnergy", "contents": "tech.consumeTechEnergy(${1})" },
		{ "trigger": "tech.setLightPointAngle", "contents": "tech.setLightPointAngle(${1})" },
		{ "trigger": "tech.setGlobalTag", "contents": "tech.setGlobalTag(${1})" },
		{ "trigger": "tech.hasSound", "contents": "tech.hasSound(${1})" },
		{ "trigger": "tech.setAnimationRate", "contents": "tech.setAnimationRate(${1})" },
		{ "trigger": "tech.setParticleEmitterActive", "contents": "tech.setParticleEmitterActive(${1})" },
		{ "trigger": "tech.setParentState", "contents": "tech.setParentState(${1})" },
		{ "trigger": "tech.burstParticleEmitter", "contents": "tech.burstParticleEmitter(${1})" },
		{ "trigger": "tech.setVisible", "contents": "tech.setVisible(${1})" },

		{ "trigger": "animator.appliedOffset", "contents": "animator.appliedOffset(${1})" },
		{ "trigger": "animator.setParticleEmitterEmissionRate", "contents": "animator.setParticleEmitterEmissionRate(${1})" },
		{ "trigger": "animator.setEffectActive", "contents": "animator.setEffectActive(${1})" },
		{ "trigger": "animator.setPartTag", "contents": "animator.setPartTag(${1})" },
		{ "trigger": "animator.hasSound", "contents": "animator.hasSound(${1})" },
		{ "trigger": "animator.setLightPosition", "contents": "animator.setLightPosition(${1})" },
		{ "trigger": "animator.currentRotationAngle", "contents": "animator.currentRotationAngle(${1})" },
		{ "trigger": "animator.animationState", "contents": "animator.animationState(${1})" },
		{ "trigger": "animator.setSoundPool", "contents": "animator.setSoundPool(${1})" },
		{ "trigger": "animator.setSoundPosition", "contents": "animator.setSoundPosition(${1})" },
		{ "trigger": "animator.scaleGroup", "contents": "animator.scaleGroup(${1})" },
		{ "trigger": "animator.setFlipped", "contents": "animator.setFlipped(${1})" },
		{ "trigger": "animator.burstParticleEmitter", "contents": "animator.burstParticleEmitter(${1})" },
		{ "trigger": "animator.setGlobalTag", "contents": "animator.setGlobalTag(${1})" },
		{ "trigger": "animator.setParticleEmitterOffsetRegion", "contents": "animator.setParticleEmitterOffsetRegion(${1})" },
		{ "trigger": "animator.playSound", "contents": "animator.playSound(${1})" },
		{ "trigger": "animator.setLightActive", "contents": "animator.setLightActive(${1})" },
		{ "trigger": "animator.setLightPointAngle", "contents": "animator.setLightPointAngle(${1})" },
		{ "trigger": "animator.animationStateProperty", "contents": "animator.animationStateProperty(${1})" },
		{ "trigger": "animator.anchorPoint", "contents": "animator.anchorPoint(${1})" },
		{ "trigger": "animator.setParticleEmitterActive", "contents": "animator.setParticleEmitterActive(${1})" },
		{ "trigger": "animator.setAnimationState", "contents": "animator.setAnimationState(${1})" },
		{ "trigger": "animator.currentScale", "contents": "animator.currentScale(${1})" },
		{ "trigger": "animator.setAnimationRate", "contents": "animator.setAnimationRate(${1})" },
		{ "trigger": "animator.rotateGroup", "contents": "animator.rotateGroup(${1})" },

		{ "trigger": "console.dismiss", "contents": "console.dismiss(${1})" },
		{ "trigger": "console.sourceEntity", "contents": "console.sourceEntity(${1})" },
		{ "trigger": "console.canvasDrawPoly", "contents": "console.canvasDrawPoly(${1})" },
		{ "trigger": "console.playSound", "contents": "console.playSound(${1})" },
		{ "trigger": "console.canvasDrawLine", "contents": "console.canvasDrawLine(${1})" },
		{ "trigger": "console.canvasDrawImage", "contents": "console.canvasDrawImage(${1})" },
		{ "trigger": "console.configParameter", "contents": "console.configParameter(${1})" },
		{ "trigger": "console.canvasMousePosition", "contents": "console.canvasMousePosition(${1})" },
		{ "trigger": "console.canvasDrawRect", "contents": "console.canvasDrawRect(${1})" },
		{ "trigger": "console.canvasDrawImageCentered", "contents": "console.canvasDrawImageCentered(${1})" },
		{ "trigger": "console.canvasDrawText", "contents": "console.canvasDrawText(${1})" },
		{ "trigger": "console.canvasDrawImageRect", "contents": "console.canvasDrawImageRect(${1})" },

		{ "trigger": "mcontroller.onGround", "contents": "mcontroller.onGround(${1})" },
		{ "trigger": "mcontroller.velocity", "contents": "mcontroller.velocity(${1})" },
		{ "trigger": "mcontroller.setXVelocity", "contents": "mcontroller.setXVelocity(${1})" },
		{ "trigger": "mcontroller.setYVelocity", "contents": "mcontroller.setYVelocity(${1})" },
		{ "trigger": "mcontroller.controlMove", "contents": "mcontroller.controlMove(${1})" },
		{ "trigger": "mcontroller.baseParameters", "contents": "mcontroller.baseParameters(${1})" },
		{ "trigger": "mcontroller.controlFly", "contents": "mcontroller.controlFly(${1})" },
		{ "trigger": "mcontroller.collisionPoly", "contents": "mcontroller.collisionPoly(${1})" },
		{ "trigger": "mcontroller.position", "contents": "mcontroller.position(${1})" },
		{ "trigger": "mcontroller.canJump", "contents": "mcontroller.canJump(${1})" },
		{ "trigger": "mcontroller.controlJump", "contents": "mcontroller.controlJump(${1})" },
		{ "trigger": "mcontroller.controlHoldJump", "contents": "mcontroller.controlHoldJump(${1})" },
		{ "trigger": "mcontroller.controlParameters", "contents": "mcontroller.controlParameters(${1})" },
		{ "trigger": "mcontroller.facingDirection", "contents": "mcontroller.facingDirection(${1})" },
		{ "trigger": "mcontroller.controlFace", "contents": "mcontroller.controlFace(${1})" },
		{ "trigger": "mcontroller.controlApproachVelocity", "contents": "mcontroller.controlApproachVelocity(${1})" },
		{ "trigger": "mcontroller.controlApproachXVelocity", "contents": "mcontroller.controlApproachXVelocity(${1})" },
		{ "trigger": "mcontroller.controlApproachYVelocity", "contents": "mcontroller.controlApproachYVelocity(${1})" },
		{ "trigger": "mcontroller.measuredVelocity", "contents": "mcontroller.measuredVelocity(${1})" },
		{ "trigger": "mcontroller.setPosition", "contents": "mcontroller.setPosition(${1})" },
		{ "trigger": "mcontroller.boundBox", "contents": "mcontroller.boundBox(${1})" },
		{ "trigger": "mcontroller.controlDown", "contents": "mcontroller.controlDown(${1})" },
		{ "trigger": "mcontroller.liquidPercentage", "contents": "mcontroller.liquidPercentage(${1})" },
		{ "trigger": "mcontroller.movingDirection", "contents": "mcontroller.movingDirection(${1})" },
		{ "trigger": "mcontroller.walking", "contents": "mcontroller.walking(${1})" },
		{ "trigger": "mcontroller.running", "contents": "mcontroller.running(${1})" },
		{ "trigger": "mcontroller.liquidMovement", "contents": "mcontroller.liquidMovement(${1})" },
		{ "trigger": "mcontroller.controlModifiers", "contents": "mcontroller.controlModifiers(${1})" },
		{ "trigger": "mcontroller.xVelocity", "contents": "mcontroller.xVelocity(${1})" },
		{ "trigger": "mcontroller.yVelocity", "contents": "mcontroller.yVelocity(${1})" },
		{ "trigger": "mcontroller.addMomentum", "contents": "mcontroller.addMomentum(${1})" },
		{ "trigger": "mcontroller.controlForce", "contents": "mcontroller.controlForce(${1})" },
		{ "trigger": "mcontroller.setRotation", "contents": "mcontroller.setRotation(${1})" },
		{ "trigger": "mcontroller.xPosition", "contents": "mcontroller.xPosition(${1})" },
		{ "trigger": "mcontroller.yPosition", "contents": "mcontroller.yPosition(${1})" },
		{ "trigger": "mcontroller.translate", "contents": "mcontroller.translate(${1})" },
		{ "trigger": "mcontroller.isColliding", "contents": "mcontroller.isColliding(${1})" },
		{ "trigger": "mcontroller.controlAcceleration", "contents": "mcontroller.controlAcceleration(${1})" },
		{ "trigger": "mcontroller.controlCrouch", "contents": "mcontroller.controlCrouch(${1})" },
		{ "trigger": "mcontroller.flying", "contents": "mcontroller.flying(${1})" },
		{ "trigger": "mcontroller.collisionBody", "contents": "mcontroller.collisionBody(${1})" },
		{ "trigger": "mcontroller.isNullColliding", "contents": "mcontroller.isNullColliding(${1})" },
		{ "trigger": "mcontroller.crouching", "contents": "mcontroller.crouching(${1})" },
		{ "trigger": "mcontroller.rotation", "contents": "mcontroller.rotation(${1})" },
		{ "trigger": "mcontroller.controlRotation", "contents": "mcontroller.controlRotation(${1})" },
		{ "trigger": "mcontroller.jumping", "contents": "mcontroller.jumping(${1})" },
		{ "trigger": "mcontroller.falling", "contents": "mcontroller.falling(${1})" },
		{ "trigger": "mcontroller.isCollisionStuck", "contents": "mcontroller.isCollisionStuck(${1})" },
		{ "trigger": "mcontroller.positionDelta", "contents": "mcontroller.positionDelta(${1})" },
		{ "trigger": "mcontroller.liquidId", "contents": "mcontroller.liquidId(${1})" },
		{ "trigger": "mcontroller.setVelocity", "contents": "mcontroller.setVelocity(${1})" },

		{ "trigger": "util.blockSensorTest", "contents": "util.blockSensorTest(${1})" },
		{ "trigger": "util.toDirection", "contents": "util.toDirection(${1})" },
		{ "trigger": "util.clamp", "contents": "util.clamp(${1})" },
		{ "trigger": "util.incWrap", "contents": "util.incWrap(${1})" },
		{ "trigger": "util.wrapAngle", "contents": "util.wrapAngle(${1})" },
		{ "trigger": "util.trackTarget", "contents": "util.trackTarget(${1})" },
		{ "trigger": "util.trackExistingTarget", "contents": "util.trackExistingTarget(${1})" },
		{ "trigger": "util.easeInOutQuad", "contents": "util.easeInOutQuad(${1})" },
		{ "trigger": "util.randomDirection", "contents": "util.randomDirection(${1})" },
		{ "trigger": "util.debugRect", "contents": "util.debugRect(${1})" },
		{ "trigger": "util.debugLine", "contents": "util.debugLine(${1})" },
		{ "trigger": "util.debugLog", "contents": "util.debugLog(${1})" },
		{ "trigger": "util.wait", "contents": "util.wait(${1})" },
		{ "trigger": "util.aimVector", "contents": "util.aimVector(${1})" },

		{ "trigger": "vec2.eq", "contents": "vec2.eq(${1})" },
		{ "trigger": "vec2.mag", "contents": "vec2.mag(${1})" },
		{ "trigger": "vec2.norm", "contents": "vec2.norm(${1})" },
		{ "trigger": "vec2.mul", "contents": "vec2.mul(${1})" },
		{ "trigger": "vec2.div", "contents": "vec2.div(${1})" },
		{ "trigger": "vec2.add", "contents": "vec2.add(${1})" },
		{ "trigger": "vec2.sub", "contents": "vec2.sub(${1})" },
		{ "trigger": "vec2.angle", "contents": "vec2.angle(${1})" },
		{ "trigger": "vec2.rotate", "contents": "vec2.rotate(${1})" },
		{ "trigger": "vec2.intersect", "contents": "vec2.intersect(${1})" },

		{ "trigger": "script.setUpdateDelta", "contents": "script.setUpdateDelta(${1})" },
		{ "trigger": "script.updateDt", "contents": "script.updateDt(${1})" },

		{ "trigger": "entityProxy.create", "contents": "entityProxy.create(${1})" },

		{ "trigger": "sensors.create", "contents": "sensors.create(${1})" },

		{ "trigger": "stateMachine.create", "contents": "stateMachine.create(${1})" },
		{ "trigger": "stateMachine.scanScripts", "contents": "(${1})" },
		{ "trigger": "hasState", "contents": "hasState(${1})" },
		{ "trigger": "shuffleStates", "contents": "shuffleStates(${1})" },
		{ "trigger": "moveStateToEnd", "contents": "moveStateToEnd(${1})" },
		{ "trigger": "pickState", "contents": "pickState(${1})" },
		{ "trigger": "endState", "contents": "endState(${1})" },
		{ "trigger": "stateDesc", "contents": "stateDesc(${1})" },
		{ "trigger": "stateCooldown", "contents": "stateCooldown(${1})" },

		{ "trigger": "clear", "contents": "clear(${1})" },
		{ "trigger": "setParentDirectives", "contents": "setParentDirectives(${1})" },
		{ "trigger": "translate", "contents": "translate(${1})" },
		{ "trigger": "move", "contents": "move(${1})" },
		{ "trigger": "moveX", "contents": "moveX(${1})" },
		{ "trigger": "moveTo", "contents": "moveTo(${1})" },
		{ "trigger": "getExpirationTime", "contents": "getExpirationTime(${1})" },
		{ "trigger": "findPath", "contents": "findPath(${1})" },
		{ "trigger": "updatePath", "contents": "updatePath(${1})" },
		{ "trigger": "advancePath", "contents": "advancePath(${1})" },
		{ "trigger": "attemptUnsticking", "contents": "attemptUnsticking(${1})" },
		{ "trigger": "incrementStuckCount", "contents": "incrementStuckCount(${1})" },
		{ "trigger": "approachTargetPosition", "contents": "approachTargetPosition(${1})" },
		{ "trigger": "passedTarget", "contents": "passedTarget(${1})" },
		{ "trigger": "jump", "contents": "jump(${1})" },
		{ "trigger": "timedDrop", "contents": "timedDrop(${1})" },
		{ "trigger": "keepDropping", "contents": "keepDropping(${1})" },
		{ "trigger": "timeToFall", "contents": "timeToFall(${1})" },
		{ "trigger": "validStandingPosition", "contents": "validStandingPosition(${1})" },
		{ "trigger": "findGroundPosition", "contents": "findGroundPosition(${1})" },
		{ "trigger": "onSolidGround", "contents": "onSolidGround(${1})" },
		{ "trigger": "padBoundBox", "contents": "padBoundBox(${1})" },
		{ "trigger": "tickMoveDistance", "contents": "tickMoveDistance(${1})" },
		{ "trigger": "debugPathEdgeColor", "contents": "debugPathEdgeColor(${1})" },
		{ "trigger": "debugPath", "contents": "debugPath(${1})" },
		{ "trigger": "boundingBox", "contents": "boundingBox(${1})" },

		{ "trigger": "itemType", "contents": "itemType(${1})" },
		{ "trigger": "swapItemSlot", "contents": "swapItemSlot(${1})" },
		{ "trigger": "isAttacking", "contents": "isAttacking(${1})" },
		{ "trigger": "attackTargetId", "contents": "attackTargetId(${1})" },
		{ "trigger": "stateName", "contents": "stateName(${1})" },
		{ "trigger": "stateTargetId", "contents": "stateTargetId(${1})" },
		{ "trigger": "shouldAttackOnSight", "contents": "shouldAttackOnSight(${1})" },
		{ "trigger": "attack", "contents": "attack(${1})" },
		{ "trigger": "stopAttacking", "contents": "stopAttacking(${1})" },
		{ "trigger": "nearbyAttackerCount", "contents": "nearbyAttackerCount(${1})" },
		{ "trigger": "isInside", "contents": "isInside(${1})" },
		{ "trigger": "isTimeFor", "contents": "isTimeFor(${1})" },
		{ "trigger": "sendNotification", "contents": "sendNotification(${1})" },
		{ "trigger": "receiveNotification", "contents": "receiveNotification(${1})" },
		{ "trigger": "noticePlayers", "contents": "noticePlayers(${1})" },
		{ "trigger": "controlFace", "contents": "controlFace(${1})" },
		{ "trigger": "debugLog", "contents": "debugLog(${1})" },
		{ "trigger": "debugRect", "contents": "debugRect(${1})" },
		{ "trigger": "hasCapability", "contents": "hasCapability(${1})" },
		{ "trigger": "spawnedBy", "contents": "spawnedBy(${1})" },
		{ "trigger": "sayToTarget", "contents": "sayToTarget(${1})" },

		{ "trigger": "init", "contents": "init(${1})" },
		{ "trigger": "update", "contents": "update(${1})" },
		{ "trigger": "die", "contents": "die(${1})" },
		{ "trigger": "damage", "contents": "damage(${1})" },
		{ "trigger": "shouldDie", "contents": "shouldDie(${1})" },
		{ "trigger": "interact", "contents": "interact(${1})" },
		{ "trigger": "onInteraction", "contents": "onInteraction(${1})" },
		{ "trigger": "onInboundNodeChange", "contents": "onInboundNodeChange(${1})" },
		{ "trigger": "onNodeConnectionChange", "contents": "onNodeConnectionChange(${1})" },
		{ "trigger": "uninit", "contents": "uninit(${1})" },
		{ "trigger": "input", "contents": "input(${1})" },
		{ "trigger": "fireTriggered", "contents": "fireTriggered(${1})" },
		{ "trigger": "startTriggered", "contents": "startTriggered(${1})" },
		{ "trigger": "attemptedFire", "contents": "attemptedFire(${1})" },
		{ "trigger": "endFire", "contents": "endFire(${1})" },
		{ "trigger": "triggerWindup", "contents": "triggerWindup(${1})" },
		{ "trigger": "continueFire", "contents": "continueFire(${1})" },
		{ "trigger": "triggerCooldown", "contents": "triggerCooldown(${1})" },
		{}
	]
}
